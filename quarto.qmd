---
title: "Quarto"
format:
  html:
    page-layout: full
    # toc: true
    # toc_float: true
    echo: false
    keep-hidden: true
    code-tools: true
    self-contained: true
---

<style>

.list-group-item.active, .list-group-item.active:focus, .list-group-item.active:hover {
    z-index: 2;
    color: #fff;
    background-color: #A67D8E;
    border-color: #aba2a7;
    font-family: Helvetica;
}

#header {
<!-- color: #869c98;  -->
 font-family: Helvetica;
  font-size: 36px;
}

body {
  font-family: Helvetica;
  background-color: #eee6e7;
}

text {
    font-size : 12px;
}
</style>


<p style="margin-top: 30px;">
Mit [Quarto](https://quarto.org/) kann zusätzlich zu R und Python auch OJS-Code integriert werden. Damit ergeben sich vielseitige interaktive Darstellungsmöglichkeiten.
</p>

::: {.grid}

::: {.g-col-6}

<p style="margin-top: 30px;">
## Karte mit Auswahlmöglichkeit
</p>

Mit `bertin` lassen sich sehr ansprechende Karten generieren. [Hier](https://observablehq.com/@neocartocnrs/hello-bertin-js?collection=@neocartocnrs/bertin) finden sich viele verschiedene Beispiele zu `bertin`. 

```{ojs}
dach_json = JSON.parse(dach_ojs)
koord_punkte_json = JSON.parse(koord_punkte)
data = FileAttachment("daten.csv").csv({ typed: true })

```

```{ojs}


viewof land = Inputs.select(
  ["Österreich","Deutschland","Schweiz"], 
  { value: "Deutschland", 
    label: "Land:"
  }
)

viewof typ = Inputs.checkbox(
  ["A","B","C"], 
  { value: ["A","B"], 
    label: "Typ:"
  }
)

```

```{ojs}
land_ausgewaehlt = ({
type: "FeatureCollection",
features: dach_json.features.filter((d) => d.properties.Land == land)
})

koordinaten = ({
type: "FeatureCollection",
features: koord_punkte_json.features.filter((d) => typ.includes(d.properties.Typ) && d.properties.Land == land)
})

```




```{ojs}
bertin = import('https://cdn.skypack.dev/bertin@0.9.12')
epsg3035 = "+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +units=m +no_defs"

bertin.draw({
  params: {
  extent: land_ausgewaehlt,
  projection: epsg3035,
  background: "#eee6e7",
  margin: 80,
  anchor: "start"
},
  layers: [
  {
  type: "layer",
  geojson: koordinaten,
  tooltip: {
  fields: [
  "$Typ_Schrift"
  ],
  fill: "#d2bec6",
  fillOpacity: 0.7,
  strokeOpacity: 1,
  fontWeight: ["bold"],
        fontSize: [20]},
  fill: {
        type: "typo",
        values: "Typ",
        colors: "Pastel1",
        leg_x: 920,
      leg_y: 20,
      leg_w: 45,
      leg_h: 30,
      leg_fontSize: 10,
      leg_fontSize2: 10
      },
  stroke: "#63695f",
  strokeWidth: 1.8,
  symbol: "circle",
  fillOpacity: 0.8,
  symbol_size: 400
  },
  { 
  type: "layer",
  geojson: land_ausgewaehlt,
  fill: "#A67D8E",
  stroke: "#666666",
  strokeWidth: 1
  },
  {type: "shadow", geojson: land_ausgewaehlt, dx: 5, dy: 5},
  { type: "scalebar", units: "kilometers" }
  ]
})
```

:::

::: {.g-col-6}

<p style="margin-top: 30px;">
## Balkendiagramm mit Auswahlmöglichkeit
</p>

<p style="margin-bottom: 30px;">
Das Balkendiagramm mit der Häufigkeitsverteilung der Typen wird immer auf das oben ausgewählte Land angepasst.
</p>

<!-- ```{ojs} -->
<!-- viewof land2 = Inputs.select( -->
<!--   ["Österreich","Deutschland","Schweiz"],  -->
<!--   { value: "Deutschland",  -->
<!--     label: "Land:" -->
<!--   } -->
<!-- ) -->
<!-- ``` -->

```{ojs}

filtered = data.filter(function(datensatz) {
  return land == datensatz.Land;
})
```

<p id="Titel", style="margin-bottom: 20px;">Überschrift Verteilung</p>

```{ojs}
//| echo: false
//| include: false

Beschreibung  = "Häufigkeitsverteilung " + land + ":"

header = document.getElementById("Titel");
header.innerHTML = Beschreibung;

```

```{ojs}
import {BarChart} from "@d3/bar-chart"

 chart = BarChart(filtered, {
  x: d => d.Typ,
  y: d => d.Anz,
   yLabel: "↑ Häufigkeit",
  width,
  height: 500,
  color: "#A67D8E"
  
})
```

```{r, message = F, echo = F, warning = F}
library(quarto)
library(tidyverse)
library(sf)
library(geojsonsf)
library(rnaturalearth)

dach <- ne_countries(country = c("Austria","Germany","Switzerland"), scale = "medium", returnclass = "sf") %>%
  # Transformation nach WGS84 (entspricht crs 4326)
  st_transform(crs = 4326) %>% 
  mutate(Land = ifelse(name == "Switzerland","Schweiz",ifelse(name == "Germany","Deutschland", "Österreich")))

deu = ne_countries(country = "Germany", scale = "medium", returnclass = "sf") %>%
  # Transformation nach WGS84 (entspricht crs 4326)
  st_transform(crs = 4326)
oe = ne_countries(country = "Austria", scale = "medium", returnclass = "sf") %>%
  # Transformation nach WGS84 (entspricht crs 4326)
  st_transform(crs = 4326)
ch = ne_countries(country = "Switzerland", scale = "medium", returnclass = "sf") %>%
  # Transformation nach WGS84 (entspricht crs 4326)
  st_transform(crs = 4326)


#Koordinaten simulieren
set.seed(1234)
deutschand_punkte = st_sample(deu, size = 150)
oesterreich_punkte = st_sample(oe, size = 50)
schweiz_punkte = st_sample(ch, size = 50)

# Zu einem Datensatz zusammenfassen
#Deutschland
deutschand_punkte_df <- as.data.frame(st_coordinates(deutschand_punkte))
deutschand_punkte_df <- cbind(deutschand_punkte_df, Typ = sample(c("A", "B", "C"), size = nrow(deutschand_punkte_df), replace = T, prob = c(0.2, 0.3, 0.5))) %>%
  mutate(Land = "Deutschland")

# Österreich
oesterreich_punkte_df <- as.data.frame(st_coordinates(oesterreich_punkte))
oesterreich_punkte_df <- cbind(oesterreich_punkte_df, Typ = sample(c("A", "B", "C"), size = nrow(oesterreich_punkte_df), replace = T, prob = c(0.4, 0.1, 0.5))) %>%
  mutate(Land = "Österreich")

# Schweiz
schweiz_punkte_df <- as.data.frame(st_coordinates(schweiz_punkte))
schweiz_punkte_df <- cbind(schweiz_punkte_df, Typ = sample(c("A", "B", "C"), size = nrow(schweiz_punkte_df), replace = T, prob = c(0.6, 0.2, 0.2))) %>%
  mutate(Land = "Schweiz")

dach_df <- rbind(deutschand_punkte_df, oesterreich_punkte_df, schweiz_punkte_df) %>% 
  mutate(Typ_Schrift = paste("Typ:",Typ))

ojs_define(dach_ojs = sf_geojson(dach)) 

Koordinaten_Punktlayer <- st_as_sf(x = dach_df, coords = c("X","Y"),
    crs = "+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0")
ojs_define(koord_punkte = sf_geojson(Koordinaten_Punktlayer))



# Daten aus Koordinaten aggregieren:
dach_df_agg <- dach_df %>%
  group_by(Typ,Typ_Schrift,Land) %>%
  summarize(Anz = n_distinct(X)) %>%
  ungroup()

write.table(dach_df_agg,"daten.csv",row.names=F,sep=";",dec=",")
```

:::

:::
